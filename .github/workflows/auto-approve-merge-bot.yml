name: Auto approve & merge patch PRs

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-approve-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup GitHub CLI
        uses: actions/setup-gh-cli@v3

      - name: Auto approve PR
        if: |
          github.actor == 'dependabot[bot]' ||
          github.actor == 'renovate[bot]'
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Dependabot metadata
        if: github.actor == 'dependabot[bot]'
        id: metadata
        uses: dependabot/fetch-metadata@v2.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR should be auto-merged
        id: check_auto_merge
        run: |
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            UPDATE_TYPE="${{ steps.metadata.outputs.update-type }}"
            if [[ "$UPDATE_TYPE" == "version-update:semver-patch" ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.actor }}" == "renovate[bot]" ]; then
            # Patch label kontroll
            if contains(github.event.pull_request.labels.*.name, 'patch'); then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "auto_merge=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Wait for CI checks
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        run: |
          echo "Waiting for CI checks to complete..."
          sleep 30

      - name: Auto-merge PR
        if: steps.check_auto_merge.outputs.auto_merge == 'true' && github.event.pull_request.mergeable_state == 'clean'
        run: |
          gh pr merge --auto --merge ${{ github.event.pull_request.number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

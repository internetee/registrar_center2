name: Auto approve & merge patch PRs

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-approve-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Auto approve PR
        if: |
          github.actor == 'dependabot[bot]' ||
          github.actor == 'renovate[bot]'
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Dependabot metadata
        if: github.actor == 'dependabot[bot]'
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR should be auto-merged
        id: check_auto_merge
        run: |
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            UPDATE_TYPE="${{ steps.metadata.outputs.update-type }}"
            if [[ "$UPDATE_TYPE" == "version-update:semver-patch" ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
              echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.actor }}" == "renovate[bot]" ]; then
            # Check if the PR has the 'patch' label
            LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name' | tr '\n' ' ')
            if [[ "$LABELS" == *"patch"* ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "update_type=renovate-patch" >> $GITHUB_OUTPUT
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
              echo "update_type=renovate-non-patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "update_type=unknown" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
        shell: bash

      - name: Wait for CI checks
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          running-workflow-name: 'auto-approve-merge'

      - name: Check CI status
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        id: ci_status
        run: |
          STATUS=$(gh pr checks ${{ github.event.pull_request.number }} --json state -q '.[].state' | grep -v "SUCCESS" || true)
          if [ -z "$STATUS" ]; then
            echo "ci_passed=true" >> $GITHUB_OUTPUT
          else
            echo "ci_passed=false" >> $GITHUB_OUTPUT
            echo "CI checks failed or pending, skipping auto-merge"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge PR
        if: steps.check_auto_merge.outputs.auto_merge == 'true' && steps.ci_status.outputs.ci_passed == 'true'
        id: merge_pr
        run: |
          set +e
          gh pr merge --auto --merge ${{ github.event.pull_request.number }}
          set -e
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
